{
  "compilerOptions": {
    "baseUrl": "./",
    "strict": true,
    "target": "ESNext", // 指定编译后的 JavaScript 版本
    "module": "ESNext", // 指定模块代码生成的格式
    "declaration": true, // 启用后，TypeScript 编译器会为每个 .ts 文件生成相应的 .d.ts 声明文件，用于描述模块的类型信息，方便其他 TypeScript 项目引用
    "declarationMap": true, // 生成 .d.ts.map 文件，允许调试时将编译后的代码映射回 .d.ts 声明文件。这对于调试类型定义非常有用。
    "emitDeclarationOnly": true, // 只输出类型声明文件（.d.ts），不生成对应的 JavaScript 文件。这通常用于构建类型定义的库，而不输出具体的实现代码。
    // "declarationDir": "/types", // 指定生成的声明文件存放目录。这里将所有的 .d.ts 文件输出到 /types 目录下
    "skipLibCheck": true, // 跳过所有的声明文件（*.d.ts）的类型检查，以加快编译速度。通常在大型项目中使用，特别是在依赖大量第三方库时。
    "forceConsistentCasingInFileNames": true, // 强制文件名一致性检查。在文件系统不区分大小写的平台（如 Windows）上，确保导入的模块大小写保持一致
    // "sourceMap": true, // 生成 .map 文件，帮助将编译后的 JavaScript 代码映射回 TypeScript 源代码
    "outDir": "dist",
    "moduleResolution": "node", // 指定模块解析策略。node 模式遵循 Node.js 的模块解析规则，这在处理第三方模块和文件路径时很有用
    "noImplicitAny": true, // 如果 TypeScript 无法推断出类型，会报错，而不是默认为 any 类型。这有助于防止潜在的隐式类型错误。
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true, // 启用对 ES 模块和 CommonJS 模块之间的互操作性支持，生成更兼容的导入语句。通常与 allowSyntheticDefaultImports 一起使用
    "resolveJsonModule": true, // 允许导入 JSON 文件并将其作为模块处理
    "importHelpers": true, // 通过导入 tslib（TypeScript 辅助库）减少编译后的代码大小
    "noEmit": true, // 阻止生成编译输出。这通常用于类型检查阶段，而不输出实际的编译文件
    "allowJs": true,
    "paths": {
      "@src/*": ["src/*"]
    }
  },
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".ts", "js"]
      }
    }
  },
  "include": ["src/**/*", "rollup.config.ts"],
  "exclude": ["node_modules", "dist"]
}
